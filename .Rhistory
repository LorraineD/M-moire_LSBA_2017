pander(head(Var.PLS2.A,n=10))
Var.PLS2.A
Var.PLS2.A
require(knitr)
require(slidify)
?kable
opts_knit
?knitr::kable
?format
knitr::opts_chunk$set(echo = FALSE)
tab <- format(tab,scientific = T,digits=2,justify = 'right')
knitr::kable(tab,align='r')
options(kable)
opts_knit(kable)
x <- matric(sample(seq(1,100),6),nrow=3)
x <- matrix(sample(seq(1,100),6),nrow=3)
x
X <- matrix(sample(seq(1,100),6),nrow=3)
y <- matrix(sample(seq(1,100),3),ncol=1)
X
y
B <- solve(t(y)%*%y) %*% t(y) %*% X
B
cov(X[,1],y)
cor(X[,1],y)
X <- scale(X)
y <- sclae(y)
B <- solve(t(y)%*%y) %*% t(y) %*% X
X <- scale(X)
y <- scale(y)
B <- solve(t(y)%*%y) %*% t(y) %*% X
B
cov(X[,1],y)
cov(X[,2],y)
plot(NULL)
plot(0,0)
plot(0,0,type="n",ylim=c(0,0.5),xlim=c(0,1),axes=F)
axis(1) ; axis(2)
plot(0,0,type="n",ylim=c(0,0.5),xlim=c(0,1),axes=F,xlab="Composante j",ylab="Composante k ")
axis(1) ; axis(2)
plot(0,0,type="n",ylim=c(-20,20),xlim=c(-10,10),axes=F,xlab="1ère composante",ylab="2e composante",main="Représentation des observations sur les deux premières composantes globales de X")
axis(1) ; axis(2)
abline(v=0,lty=2)
abline(h=0, lty=2)
plot(0,0,type="n",ylim=c(-20,20),xlim=c(-10,10),axes=F,xlab="1ère composante",ylab="2e composante",main="Représentation des observations\n sur les deux premières composantes globales de X")
axis(1) ; axis(2)
abline(v=0,lty=2)
abline(h=0, lty=2)
plot(0,0,type="n",ylim=c(-5,5),xlim=c(-5,5),axes=F,xlab="1ère composante",ylab="2e composante",main="Covariance entre chaque variable  \n et les deux premières composantes globales")
axis(1) ; axis(2)
abline(v=0,lty=2)
abline(h=0, lty=2)
plot(0,0,type="n",ylim=c(-4,4),xlim=c(-4,4),axes=F,xlab="1ère composante",ylab="2e composante",main="Covariance entre chaque variable  \n et les deux premières composantes globales")
axis(1) ; axis(2)
abline(v=0,lty=2)
abline(h=0, lty=2)
install.packages("rgcca")
y
install.packages("RGCCA")
require(RGCCA)
rgcca
rgccak
rgcca
rgccak
X1 <- matrix(sample(seq(1,100),12),nrow=4)
X2 <- matrix(sample(seq(1,100),12),nrow=4)
Y <- matrix(sample(seq(1,100),12),ncol=3)
X1
X2 <- matrix(sample(seq(1,100),15),nrow=3)
X1 <- matrix(sample(seq(1,100),12),nrow=3)
X1
X2
Y <- matrix(sample(seq(1,100),12),nrow=3)
Y
C <- matrix(c(0,0,1,0,0,1,1,1,0),ncol=3)
C
res <- rgcca(A = list(X1,X2,Y), C = C, tau = rep(0,3), scheme = "factorial")
res$a
res$AVE
res <- rgcca(A = list(X1,X2,cbind(X1,X2)), C = C, tau = rep(0,3), scheme = "factorial")
?rgcca
res <- rgcca(A = list(X1,X2,cbind(X1,X2)), C = C, tau = rep(0,3), scheme = "factorial",ncomp=c(2,2,2))
res
A <- list(X1,X2,Y)
tau <- rep(0,length(A))
ncomp=rep(1,length(A))
rgcca
AVE_X = list()
AVE_outer <- vector()
ndefl <- ncomp - 1
N <- max(ndefl)
nb_ind <- NROW(A[[1]])
J <- length(A)
primal_dual = rep("primal", J)
primal_dual[which(nb_row < pjs)] = "dual"
pjs <- sapply(A, NCOL)
pjs
nb_row <- NROW(A[[1]])
nb_row
ndefl <- ncomp - 1
ndefl
N <- max(ndefl)
nb_ind <- NROW(A[[1]])
nb_ind
pjs
primal_dual = rep("primal", J)
primal_dual
primal_dual[which(nb_row < pjs)] = "dual"
primal_dual
nb_row
pjs
N
init='svd'
A
A <- lapply(A,as.matrix)
A
J <- length(A)
n <- NROW(A[[1]])
pjs <- sapply(A, NCOL)
Y <- matrix(0,n,J)
Y
rgccak
a <- alpha <- M <- Minv <- K <- list()
a
which.primal <- which((n >= pjs) == 1)
which.dual <- which((n < pjs) == 1)
which.primal
which.dual
initsvd
initsvd(A)
?initsvd
initsvd
initsvd <- function(X) {
n = NROW(X)
p = NCOL(X)
ifelse(n>=p, return(svd(X,nu=0,nv=1)$v)
, return(svd(X,nu=1,nv=0)$u)
)
}
for (j in which.primal) {
a[[j]] <- initsvd(A[[j]])
}
for (j in which.dual) {
alpha[[j]] <- initsvd(A[[j]])
K[[j]] <- A[[j]] %*% t(A[[j]])
}
?svd
alpha[[j]] <- initsvd(A[[j]])
K[[j]] <- A[[j]] %*% t(A[[j]])
alpha
K
N <- n
for (j in which.dual) {
ifelse(tau[j] == 1, {
alpha[[j]] = drop(1/sqrt(t(alpha[[j]]) %*% K[[j]] %*%
alpha[[j]])) * alpha[[j]]
a[[j]] = t(A[[j]]) %*% alpha[[j]]
Y[, j] = A[[j]] %*% a[[j]]
}, {
M[[j]] = tau[j] * diag(n) + (1 - tau[j])/(N) * K[[j]]
Minv[[j]] = ginv(M[[j]])
alpha[[j]] = drop(1/sqrt(t(alpha[[j]]) %*% M[[j]] %*%
K[[j]] %*% alpha[[j]])) * alpha[[j]]
a[[j]] = t(A[[j]]) %*% alpha[[j]]
Y[, j] = A[[j]] %*% a[[j]]
})
}
require(MASS)
ginv
for (j in which.dual) {
ifelse(tau[j] == 1, {
alpha[[j]] = drop(1/sqrt(t(alpha[[j]]) %*% K[[j]] %*%
alpha[[j]])) * alpha[[j]]
a[[j]] = t(A[[j]]) %*% alpha[[j]]
Y[, j] = A[[j]] %*% a[[j]]
}, {
M[[j]] = tau[j] * diag(n) + (1 - tau[j])/(N) * K[[j]]
Minv[[j]] = ginv(M[[j]])
alpha[[j]] = drop(1/sqrt(t(alpha[[j]]) %*% M[[j]] %*%
K[[j]] %*% alpha[[j]])) * alpha[[j]]
a[[j]] = t(A[[j]]) %*% alpha[[j]]
Y[, j] = A[[j]] %*% a[[j]]
})
}
j
j=1
?drop
drop(1/sqrt(t(alpha[[j]]) %*% K[[j]] %*%
alpha[[j]]))
1/sqrt(t(alpha[[j]]) %*% K[[j]] %*%
alpha[[j]])
svd(X,nu=1,nv=0)$u
X <- A[[1]]
svd(X,nu=1,nv=0)$u
svd(t(X)%*%X)
svd(X%*%t(X))
tau
tau[j]==1
cov2
alpha
alpha[[1]]
norm(alpha[[1]])
for (j in which.dual) {
M[[j]] = tau[j] * diag(n) + (1 - tau[j])/(N) * K[[j]]
Minv[[j]] = ginv(M[[j]])
alpha[[j]] = drop(1/sqrt(t(alpha[[j]]) %*% M[[j]] %*%
K[[j]] %*% alpha[[j]])) * alpha[[j]]
a[[j]] = t(A[[j]]) %*% alpha[[j]]
Y[, j] = A[[j]] %*% a[[j]]
}
Y
alpha
a
a[[1]]
var(a[[1]])
var(Y[,1])
X1 <- scale(X1) ; X2 <- scale(X2)
Y1 <- scale(Y1)
A <- list(X1,X2,Y1)
C <- matrix(c(0,0,1,0,0,1,1,1,0),ncol=3)
tau <- rep(0,length(A))
ncomp <- rep(1,length(A))
scheme <- 'factorial'
init='svd'
Y1 <- matrix(sample(seq(1,100),12),nrow=3)
X1 <- scale(X1) ; X2 <- scale(X2)
Y1 <- scale(Y1)
A <- list(X1,X2,Y1)
C <- matrix(c(0,0,1,0,0,1,1,1,0),ncol=3)
tau <- rep(0,length(A))
ncomp <- rep(1,length(A))
scheme <- 'factorial'
init='svd'
# Etape 1 ----
pjs <- sapply(A, NCOL) # Vecteur avec le nombre de avriables par matrice
nb_row <- NROW(A[[1]]) # Nombre de lignes
AVE_X <- list()
AVE_X = list()
AVE_outer <- vector()
ndefl <- ncomp - 1
N <- max(ndefl)
nb_ind <- NROW(A[[1]])
J <- length(A)
primal_dual = rep("primal", J)
primal_dual[which(nb_row < pjs)] = "dual"
primal_dual
A <- lapply(A,as.matrix)
J <- length(A) # Nombre de bloc
n <- NROW(A[[1]])
pjs <- sapply(A, NCOL)
Y <- matrix(0,n,J)
a <- alpha <- M <- Minv <- K <- list()
which.primal <- which((n >= pjs) == 1)
which.dual <- which((n < pjs) == 1)
initsvd <- function(X) {
n = NROW(X)
p = NCOL(X)
ifelse(n>=p, return(svd(X,nu=0,nv=1)$v)
, return(svd(X,nu=1,nv=0)$u)
)
}
for (j in which.primal) {
a[[j]] <- initsvd(A[[j]])
}
for (j in which.dual) {
alpha[[j]] <- initsvd(A[[j]])
K[[j]] <- A[[j]] %*% t(A[[j]])
}
N <- n
require(MASS)
for (j in which.dual) {
M[[j]] = tau[j] * diag(n) + (1 - tau[j])/(N) * K[[j]]
Minv[[j]] = ginv(M[[j]])
alpha[[j]] = drop(1/sqrt(t(alpha[[j]]) %*% M[[j]] %*%
K[[j]] %*% alpha[[j]])) * alpha[[j]]
a[[j]] = t(A[[j]]) %*% alpha[[j]]
Y[, j] = A[[j]] %*% a[[j]]
}
alpha
x <- alpha[[1]]
var(x)
var(a[[1]])
var(Y[,1])
Y
var(Y[,2])
var(Y[,3])
bias <- T
repeat {
Yold <- Y
Z[, j] = rowSums(matrix(rep(C[j, ], n), n,
J, byrow = TRUE) * matrix(rep(cov2(Y[,
j], Y, bias = bias), n), n, J, byrow = TRUE) *
Y)
alpha[[j]] = drop(1/sqrt(t(Z[, j]) %*% K[[j]] %*%
Minv[[j]] %*% Z[, j])) * (Minv[[j]] %*%
Z[, j])
a[[j]] = t(A[[j]]) %*% alpha[[j]]
Y[, j] = A[[j]] %*% a[[j]]
if (verbose & (iter%%1) == 0)
cat(" Iter: ", formatC(iter, width = 3, format = "d"),
" Fit:", formatC(crit[iter], digits = 8, width = 10,
format = "f"), " Dif: ", formatC(crit[iter] -
crit_old, digits = 8, width = 10, format = "f"),
"\n")
stopping_criteria = c(drop(crossprod(Reduce("c", mapply("-",
a, a_old)))), crit[iter] - crit_old)
if (any(stopping_criteria < tol) | (iter > 1000))
break
crit_old = crit[iter]
a_old <- a
iter <- iter + 1
}
iter = 1
crit = numeric()
Z = matrix(0, NROW(A[[1]]), J)
a_old = a
repeat {
Yold <- Y
Z[, j] = rowSums(matrix(rep(C[j, ], n), n,
J, byrow = TRUE) * matrix(rep(cov2(Y[,
j], Y, bias = bias), n), n, J, byrow = TRUE) *
Y)
alpha[[j]] = drop(1/sqrt(t(Z[, j]) %*% K[[j]] %*%
Minv[[j]] %*% Z[, j])) * (Minv[[j]] %*%
Z[, j])
a[[j]] = t(A[[j]]) %*% alpha[[j]]
Y[, j] = A[[j]] %*% a[[j]]
if (verbose & (iter%%1) == 0)
cat(" Iter: ", formatC(iter, width = 3, format = "d"),
" Fit:", formatC(crit[iter], digits = 8, width = 10,
format = "f"), " Dif: ", formatC(crit[iter] -
crit_old, digits = 8, width = 10, format = "f"),
"\n")
stopping_criteria = c(drop(crossprod(Reduce("c", mapply("-",
a, a_old)))), crit[iter] - crit_old)
if (any(stopping_criteria < tol) | (iter > 1000))
break
crit_old = crit[iter]
a_old <- a
iter <- iter + 1
}
bias <- T ; verbose = FALSE
repeat {
Yold <- Y
Z[, j] = rowSums(matrix(rep(C[j, ], n), n,
J, byrow = TRUE) * matrix(rep(cov2(Y[,
j], Y, bias = bias), n), n, J, byrow = TRUE) *
Y)
alpha[[j]] = drop(1/sqrt(t(Z[, j]) %*% K[[j]] %*%
Minv[[j]] %*% Z[, j])) * (Minv[[j]] %*%
Z[, j])
a[[j]] = t(A[[j]]) %*% alpha[[j]]
Y[, j] = A[[j]] %*% a[[j]]
if (verbose & (iter%%1) == 0)
cat(" Iter: ", formatC(iter, width = 3, format = "d"),
" Fit:", formatC(crit[iter], digits = 8, width = 10,
format = "f"), " Dif: ", formatC(crit[iter] -
crit_old, digits = 8, width = 10, format = "f"),
"\n")
stopping_criteria = c(drop(crossprod(Reduce("c", mapply("-",
a, a_old)))), crit[iter] - crit_old)
if (any(stopping_criteria < tol) | (iter > 1000))
break
crit_old = crit[iter]
a_old <- a
iter <- iter + 1
}
h <- function(x) switch(scheme, horst = x, factorial = x^2,
centroid = abs(x))
crit_old <- sum(C * h(cov2(Y, bias = bias)))
repeat {
Yold <- Y
Z[, j] = rowSums(matrix(rep(C[j, ], n), n,
J, byrow = TRUE) * matrix(rep(cov2(Y[,
j], Y, bias = bias), n), n, J, byrow = TRUE) *
Y)
alpha[[j]] = drop(1/sqrt(t(Z[, j]) %*% K[[j]] %*%
Minv[[j]] %*% Z[, j])) * (Minv[[j]] %*%
Z[, j])
a[[j]] = t(A[[j]]) %*% alpha[[j]]
Y[, j] = A[[j]] %*% a[[j]]
if (verbose & (iter%%1) == 0)
cat(" Iter: ", formatC(iter, width = 3, format = "d"),
" Fit:", formatC(crit[iter], digits = 8, width = 10,
format = "f"), " Dif: ", formatC(crit[iter] -
crit_old, digits = 8, width = 10, format = "f"),
"\n")
stopping_criteria = c(drop(crossprod(Reduce("c", mapply("-",
a, a_old)))), crit[iter] - crit_old)
if (any(stopping_criteria < tol) | (iter > 1000))
break
crit_old = crit[iter]
a_old <- a
iter <- iter + 1
}
bias <- T ; verbose = FALSE ; tol = 1e-08
iter = 1
crit = numeric()
Z = matrix(0, NROW(A[[1]]), J)
a_old = a
h <- function(x) switch(scheme, horst = x, factorial = x^2,
centroid = abs(x))
crit_old <- sum(C * h(cov2(Y, bias = bias)))
repeat {
Yold <- Y
Z[, j] = rowSums(matrix(rep(C[j, ], n), n,
J, byrow = TRUE) * matrix(rep(cov2(Y[,
j], Y, bias = bias), n), n, J, byrow = TRUE) *
Y)
alpha[[j]] = drop(1/sqrt(t(Z[, j]) %*% K[[j]] %*%
Minv[[j]] %*% Z[, j])) * (Minv[[j]] %*%
Z[, j])
a[[j]] = t(A[[j]]) %*% alpha[[j]]
Y[, j] = A[[j]] %*% a[[j]]
if (verbose & (iter%%1) == 0)
cat(" Iter: ", formatC(iter, width = 3, format = "d"),
" Fit:", formatC(crit[iter], digits = 8, width = 10,
format = "f"), " Dif: ", formatC(crit[iter] -
crit_old, digits = 8, width = 10, format = "f"),
"\n")
stopping_criteria = c(drop(crossprod(Reduce("c", mapply("-",
a, a_old)))), crit[iter] - crit_old)
if (any(stopping_criteria < tol) | (iter > 1000))
break
crit_old = crit[iter]
a_old <- a
iter <- iter + 1
}
repeat {
Yold <- Y
Z[, j] = rowSums(matrix(rep(C[j, ], n), n,
J, byrow = TRUE) * matrix(rep(cov2(Y[,
j], Y, bias = bias), n), n, J, byrow = TRUE) *
Y)
alpha[[j]] = drop(1/sqrt(t(Z[, j]) %*% K[[j]] %*%
Minv[[j]] %*% Z[, j])) * (Minv[[j]] %*%
Z[, j])
a[[j]] = t(A[[j]]) %*% alpha[[j]]
Y[, j] = A[[j]] %*% a[[j]]
if (verbose & (iter%%1) == 0)
cat(" Iter: ", formatC(iter, width = 3, format = "d"),
" Fit:", formatC(crit[iter], digits = 8, width = 10,
format = "f"), " Dif: ", formatC(crit[iter] -
crit_old, digits = 8, width = 10, format = "f"),
"\n")
stopping_criteria = c(drop(crossprod(Reduce("c", mapply("-",
a, a_old)))), crit[iter] - crit_old)
if (any(stopping_criteria < tol) | (iter > 1000))    break
crit_old = crit[iter]
a_old <- a
iter <- iter + 1
}
stopping_criteria
crossprod
crit
crit_old
repeat {
Yold <- Y
Z[, j] = rowSums(matrix(rep(C[j, ], n), n,
J, byrow = TRUE) * matrix(rep(cov2(Y[,
j], Y, bias = bias), n), n, J, byrow = TRUE) *
Y)
alpha[[j]] = drop(1/sqrt(t(Z[, j]) %*% K[[j]] %*%
Minv[[j]] %*% Z[, j])) * (Minv[[j]] %*%
Z[, j])
a[[j]] = t(A[[j]]) %*% alpha[[j]]
Y[, j] = A[[j]] %*% a[[j]]
g <- function(x) switch(scheme, horst = x, factorial = x^2,
centroid = abs(x))
crit[iter] <- sum(C * g(cov2(Y, bias = bias)))
if (verbose & (iter%%1) == 0)
cat(" Iter: ", formatC(iter, width = 3, format = "d"),
" Fit:", formatC(crit[iter], digits = 8, width = 10,
format = "f"), " Dif: ", formatC(crit[iter] -
crit_old, digits = 8, width = 10, format = "f"),
"\n")
stopping_criteria = c(drop(crossprod(Reduce("c", mapply("-",
a, a_old)))), crit[iter] - crit_old)
if (any(stopping_criteria < tol) | (iter > 1000))    break
crit_old = crit[iter]
a_old <- a
iter <- iter + 1
}
iter
Y
var(Y[◘,1])
var(Y[,1])
var(Y[,2])
?cov2
cov2(y)
cov2(Y)
t(Y)%*%Y
colmean(Y)
colMeans(Y)
Y%*%t(Y)
cov(Y)
cov2()
cov2
((n - 1)/n)/cov(Y)
setwd("~/")
setwd("C:/Users/Lorraine/Desktop/Code_propre")
setwd("C:/Users/Lorraine/Desktop/Code_propre")
source("Settings_Data.R")
load("/Data/ClassY.Rdata")
load("Data/ClassY.Rdata")
source("Settings_Data.R")
source("C:/Users/Lorraine/Documents/BSTA2/2ème Master/Mémoire/Code/MBPLS/Fct_MBPLS.txt")
source("Fonctions/Fct_MBPLS.txt")
source("Fonctions/Fonction_Qualite.R")
a = 6
mod <-  MBPLS(NCI, Class.mat, A=a, deflY =TRUE, ScaleX = TRUE)
source("Settings_Data.R")
